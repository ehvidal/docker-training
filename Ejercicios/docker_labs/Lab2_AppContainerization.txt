1. Crear un directorio por ejemplo (cambiar dchavez por su nombre de usuario en su PC):
/c/Users/dchavez/dockerfiletest

2. Crear un archivo Dockerfile (sin extension) dentro del directorio que contenga:

# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
ADD . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "app.py"]

3. Crear un archivo requirements.txt que contenga:

Flask
Redis

4. Crear un archivo app.py que contenga:

from flask import Flask
from redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host="redis", db=0, socket_connect_timeout=2, socket_timeout=2)

app = Flask(__name__)

@app.route("/")
def hello():
    try:
        visits = redis.incr("counter")
    except RedisError:
        visits = "<i>cannot connect to Redis, counter disabled</i>"

    html = "<h3>Hello {name}!</h3>" \
           "<b>Hostname:</b> {hostname}<br/>" \
           "<b>Visits:</b> {visits}"
    return html.format(name=os.getenv("NAME", "world"), hostname=socket.gethostname(), visits=visits)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)

5. Observar si se esta dentro del directorio /c/Users/User/dockerfiletest y ejecutar ls o dir para ver si 
estan los tres archvos ahi.

6. Crear una imagen a partir del Dockerfile, tagueandola con por ej el nombre dockertest 
docker build -t dockertest .

7. Ver si se creo la imagen en el repositorio local:
docker images
tambien:
docker image ls

8. Ejecutar la aplicacion:
docker run -p 4000:80 dockertest 

9. Ver en un browser (si se ejecuta en linux):
http://localhost:4000/
Si se utiliza docker-machine ver cual IP se asigno al server, por ej:
http://192.168.99.100:4000/

10. Tambien se puede ejecutar el comando curl si se usa una terminal en linux
o la terminal de Toolbox:
curl http://192.168.99.100:4000/

11. Apagar la aplicacion con ctrl+c

12. Ejecutar:
docker ps
Apagar el container, por ej:
docker stop 9c9d43a3cc0b 

13. Probar en modo detachado:
docker run -d -p 4000:80 dockertest

14. Ver si se levanto y cual id se asigno:
docker container ls

15. Observar que el id del container se corresponde con lo mostrado en el browser en Hostname. Parar el container.

16. Para compartir la imagen creada darse de alta en https://hub.docker.com/
Loguearse en la terminal:
docker login
Ingresar usuario y password dados de alta.

17. Taguear la imagen utilizando este formato "docker tag image username/repository:tag" por ej:
docker tag dockertest diegochavezcarro/dockertest:parte1

18. Ver las imagenes creadas:
docker images

19. Publicar la imagen en el repositorio:
docker push diegochavezcarro/dockertest:parte1

20. Ver en el repositorio de docker hub si se subio la imagen.

21. Parar el anterior contenedor levantado as� liberamos el puerto (si no lo paramos antes). Traer la imagen y ejecutar el container:
docker run -d -p 4000:80 diegochavezcarro/dockertest:parte1

22. Probar en el browser. Con "docker container ls -a" podemos ver todos los contenedores, incluso los que se pararon.

23. Por qu� se ven tantos?

24. Utilizando el id del container levantado ingresar en el mismo con un bash:
docker exec -it d2f36e666000 bash
Probar comandos de linux, por ej "pwd", "ls"
Ejecutar:
ps aux
Qu� se observa? Por que sucedio eso?
Instalar el comando "ps"
apt-get update 
apt-get install --reinstall procps  
Y ejecutar nuevamente:
ps aux
Qu� procesos se observan?
Qu� Process ID tiene el proceso "python app.py"?

25. Salir de esa terminal con ctrl+PQ
En este momento volvemos a estar en el host.
26. Ver qu� procesos est�n corriendo en la vm que tiene docker:
Caso Docker Toolbox:
docker-machine ssh default "ps aux"
Caso Docker for Windows:
docker-machine ssh myvm1 "ps aux"
Caso Linux:
ps aux
Ver la informacion que mas nos interesa:
docker-machine ssh default "ps aux | grep app.py" 
Qu� significa esto?
Qu� Process ID tiene el proceso "python app.py"? D�nde se est� ejecutando el mismo?
27. Si al final se quieren borrar todos los containers (previamente deberian estar parados):
docker container rm $(docker container ls -a -q)
Y si se quieren eliminar todas las imagenes:
docker image rm $(docker image ls -a -q) -f
El "-f" es modo forzado. Se utiliza en este caso debido a que hay im�genes que dependen de otras.







